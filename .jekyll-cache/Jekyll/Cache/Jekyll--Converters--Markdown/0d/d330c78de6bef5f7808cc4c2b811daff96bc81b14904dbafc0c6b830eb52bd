I"E\<h2 id="문제">문제</h2>

<p>안녕하세요.<br />
 백준에서 삼성 SW 역량 테스트 기출 문제집에 게시된 <a href="https://www.acmicpc.net/problem/16234">16234번 톱니바퀴</a> 문제 풀이를 소개하겠습니다.</p>

<p>이번 문제는 2차원 배열 내에서 변화가 몇 번 만큼이나 발생하는지 확인하는 문제 입니다.<br />
 세부적으로는 배열에서 특정 구역 내에 있는 숫자들의 평균을 구해야 합니다.<br />
 문제에서 주어진 조건에 맞추어 BFS(넓이 우선 탐색)를 진행하여 구역을 탐색하면 되겠습니다.</p>

<p>풀이 코드는 사람이 쉽게 이해 할 수 있는 코드를 지향하여 작성하였습니다. 따라서 최적의 성능을 가지는 코드가 아닐 수 있습니다.</p>

<h3 id="주어진-정보">주어진 정보</h3>

<ul>
  <li>N : 2차원 배열의 가로, 세로 길이</li>
  <li>L : 연합이 가능한 조건 중 최소 차이</li>
  <li>R : 연합이 가능한 조건 중 최대 차이</li>
  <li>배열의 요소 : 해당 칸(나라)의 인구</li>
</ul>

<h3 id="해결-방향">해결 방향</h3>

<p>먼저 2차원 배열의 모든 요소를 순회 하되, 바로 인접한 나라들의 값을 변경하려고 하면 해결할 수가 없습니다.<br />
 문제 조건에 맞는 연합 리스트를 만들고 하나의 연합의 총 인구를 계산후 배열의 값을 갱신하여 해결할 수 있습니다.</p>

<h2 id="풀이">풀이</h2>
<h3 id="풀이-코드">풀이 코드</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">dd</span><span class="p">[][</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="p">};</span>	<span class="c1">// 확인 방향에 따른 인덱스 변화 값</span>

<span class="n">vector</span> <span class="o">&lt;</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">;</span>	<span class="c1">// 땅 배열</span>
<span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">L</span><span class="p">,</span><span class="n">R</span><span class="p">;</span> <span class="c1">// N : 땅 크기, L : 인구 차이 최저 기준, R : 인구 차이 최대 기준</span>


<span class="kt">bool</span> <span class="nf">check_boundary</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">get_unions</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">vector</span> <span class="o">&lt;</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">arr_visited</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>	<span class="c1">// 국가 방문 기록 배열</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">unions</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span><span class="p">();</span>				<span class="c1">// 연합으로 구성된 국가들 리스트</span>
		
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">union_</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">();</span>	<span class="c1">// 연합 임시 저장용</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">();</span>	<span class="c1">// 탐색 임시 저장용</span>

	<span class="c1">// 모든 땅에 대해 연합 국가들을 탐색</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">queue</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
			<span class="n">union_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>

			<span class="c1">// 탐색 시작할 위치에 이미 방문한 기록이 있으면 패스</span>
			<span class="k">if</span><span class="p">(</span><span class="n">arr_visited</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">r</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> 
				<span class="k">continue</span><span class="p">;</span>

			<span class="c1">// 탐색 큐에 추가</span>
			<span class="n">queue</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">r</span><span class="p">));</span>
			<span class="n">arr_visited</span><span class="p">[</span><span class="n">c</span><span class="p">][</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

			<span class="c1">// BFS</span>
			<span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>	<span class="c1">// 탐색 하고자 하는 큐가 비어있다면 종료</span>

				<span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>	<span class="c1">// 탐색된 현재 위치</span>
				<span class="n">queue</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>			<span class="c1">// 맨 앞의 요소 제거</span>
				<span class="n">union_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>				<span class="c1">// 조건에 만족하는 국가 추가</span>

				<span class="c1">// 현재 위치 기준으로 네 방향 탐색.</span>
				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">way</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">way</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">way</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
					<span class="kt">int</span> <span class="n">c_</span> <span class="o">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="n">dd</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">way</span><span class="p">];</span>
					<span class="kt">int</span> <span class="n">r_</span> <span class="o">=</span> <span class="n">pos</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="n">dd</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">way</span><span class="p">];</span>

					<span class="c1">// 배열 밖을 벗어나는 경우, 이미 방문한 경우, 인구 차이 조건 맞지 않은 경우 패스</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">check_boundary</span><span class="p">(</span><span class="n">c_</span><span class="p">,</span> <span class="n">r_</span><span class="p">)</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">arr_visited</span><span class="p">[</span><span class="n">c_</span><span class="p">][</span><span class="n">r_</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

					<span class="kt">int</span> <span class="n">diff_pop</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">-</span> <span class="n">arr</span><span class="p">[</span><span class="n">c_</span><span class="p">][</span><span class="n">r_</span><span class="p">]);</span> <span class="c1">// 인구 차이 계산</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">diff_pop</span> <span class="o">&lt;</span> <span class="n">L</span> <span class="o">||</span> <span class="n">diff_pop</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

					<span class="c1">// 모든 조건에 만족하는 경우 해당 국가에 방문</span>
					<span class="n">queue</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c_</span><span class="p">,</span> <span class="n">r_</span><span class="p">));</span>
					<span class="n">arr_visited</span><span class="p">[</span><span class="n">c_</span><span class="p">][</span><span class="n">r_</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1">// 국경개방 국가가 두 군데 이상이라면, 연합 리스트에 추가</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">union_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="n">unions</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">union_</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">unions</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">move_population</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">unions</span><span class="p">)</span> <span class="p">{</span>

	<span class="c1">// 개방된 연합들에 대해 반복</span>
	<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">union_</span> <span class="o">:</span> <span class="n">unions</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">union_</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>

		<span class="c1">// 연합들의 총 인구수 계산</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">union_</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">sum</span> <span class="o">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">];</span>
		<span class="p">}</span>

		<span class="c1">// 이동된 인구 계산</span>
		<span class="kt">int</span> <span class="n">pop</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">sum</span> <span class="o">/</span> <span class="n">total</span><span class="p">);</span>

		<span class="c1">// 연합들의 인구수 갱신</span>
		<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">union_</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">arr</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="n">pop</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">solution</span><span class="p">()</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;&gt;</span> <span class="n">unions</span> <span class="o">=</span> <span class="n">get_unions</span><span class="p">();</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">unions</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">day</span><span class="o">++</span><span class="p">;</span>
			<span class="n">move_population</span><span class="p">(</span><span class="n">unions</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="p">{</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">day</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="n">L</span> <span class="o">&gt;&gt;</span> <span class="n">R</span><span class="p">;</span>

	<span class="n">arr</span> <span class="o">=</span> <span class="n">vector</span><span class="o">&lt;</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">vector</span> <span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="c1">// 초기화 끝</span>


	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solution</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="해설">해설</h3>

<ul>
  <li>solution() : 연합이 반복적으로 구성될 때, day를 증가 시키며 인구 이동</li>
  <li>get_unions() : 조건에 해당하는 연합들의 리스트를 반환
    <ul>
      <li>vector &lt; vector <bool> &gt; arr_visited : 중복 탐색 방지를 위한 방문 맵</bool></li>
      <li>vector&lt;vector&lt;pair&lt;int, int»&gt; unions : 같은 연합에 포함되는 나라들의 인덱스 정보를 저장</li>
      <li>BFS : 배열의 모든 인덱스를 시작 위치로 하여 인구 차이가 조건에 맞으면 큐에 추가하면서 탐색을 진행. 더 이상 방문할 나라가 없다면 방문했던 나라들을 연합으로 묶어 저장.</li>
    </ul>
  </li>
  <li>move_population() : 저장된 각 연합들 내에서 인구 이동을 시킴
 <br /></li>
</ul>

<h3 id="앗-이걸-생각-못했네">앗 이걸 생각 못했네?</h3>

<ul>
  <li>BFS 코드 작성을 많이 해본 분들에게는 당연한 이야기 일수도 있지만…
    <ul>
      <li>BFS 진행 중에 발생하는 대부분의 에러는 배열의 인덱스 초과 였던 것 같다.</li>
      <li>
        <int>인덱스 체크</int>
        <p>, <int>중복 방문</int>, <int>탐색 중단 조건</int>. 이 세가지만 주의 하면 사소한 실수는 줄일 수 있다.</p>
      </li>
    </ul>
  </li>
  <li>‘이상’, ‘이하’라는 조건에 맞게 ‘&lt;=’, ‘&gt;=’ 비교연산자 실수에 조심해야 한다.</li>
</ul>

<h2 id="다른-풀이">다른 풀이</h2>
<p><a href="https://github.com/TJ-kor/Solutions/blob/main/Baekjoon/16234_move_people.cpp">16234번 인구이동 1차 풀이</a></p>

<p><a href="https://github.com/TJ-kor/Solutions">기타 다른 문제 풀이 코드 (github)</a></p>
:ET